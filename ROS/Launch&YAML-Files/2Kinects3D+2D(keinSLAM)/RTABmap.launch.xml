<launch>

<!--Kinect Kameras-->

  <include file="/home/alf/catkin_ws/devel/lib/rplidar_ros/kinect1_bridge_new.launch"/> <!--Kamera hinten-->

  <!--<arg name="base_name"         default="kinect1"/>
  <arg name="sensor"            default="004199564147"/>
  <arg name="publish_tf"        default="false"/>
  <arg name="base_name_tf"      default="$(arg base_name)"/>
  <arg name="fps_limit"         default="5"/>
  <arg name="calib_path"        default="$(find kinect2_bridge)/data/"/>
  <arg name="use_png"           default="false"/>
  <arg name="jpeg_quality"      default="90"/>
  <arg name="png_level"         default="1"/>
  <arg name="depth_method"      default="opengl"/>
  <arg name="depth_device"      default="-1"/>
  <arg name="reg_method"        default="cpu"/>
  <arg name="reg_device"        default="-1"/>
  <arg name="max_depth"         default="10.0"/>
  <arg name="min_depth"         default="0.1"/>
  <arg name="queue_size"        default="5"/>
  <arg name="bilateral_filter"  default="true"/>
  <arg name="edge_aware_filter" default="true"/>
  <arg name="worker_threads"    default="4"/>
  <arg name="machine"           default="localhost"/>
  <arg name="nodelet_manager"   default="$(arg base_name)"/>
  <arg name="start_manager"     default="true"/>
  <arg name="use_machine"       default="true"/>
  <arg name="respawn"           default="true"/>
  <arg name="use_nodelet"       default="true"/>
  <arg name="output"            default="screen"/>

  <machine name="localhost" address="localhost" if="$(arg use_machine)"/>

  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager"
        if="$(arg start_manager)" machine="$(arg machine)" output="screen"/>-->

  <!-- Nodelet version of kinect2_bridge -->
  <!--<node pkg="nodelet" type="nodelet" name="$(arg base_name)_bridge" machine="$(arg machine)"
        args="load kinect2_bridge/kinect2_bridge_nodelet $(arg nodelet_manager)"
        respawn="$(arg respawn)" output="$(arg output)" if="$(arg use_nodelet)">
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
  </node>-->

  <!-- Node version of kinect2_bridge -->
  <!--<node pkg="kinect2_bridge" type="kinect2_bridge" name="$(arg base_name)_bridge" machine="$(arg machine)"
        respawn="$(arg respawn)" output="$(arg output)" unless="$(arg use_nodelet)">
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
  </node>-->

  <!-- sd point cloud (512 x 424)
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_sd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/sd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/sd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/sd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/sd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>
-->

   <!-- qhd point cloud (960 x 540) 
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_qhd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/qhd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/qhd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/qhd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/qhd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node> 
-->

  <!-- hd point cloud (1920 x 1080) -->
  <!--<node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_hd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/hd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/hd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/hd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/hd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>-->


	<!--Kamera Vorne-->
  <include file="/home/alf/catkin_ws/devel/lib/rplidar_ros/kinect2_bridge_new.launch"/> 

<!--Lidar-->
 
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen" clear_params="true">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
  <param name="serial_baudrate"     type="int"    value="115200"/><!-- A1/A2 -->
  <!--<param name="serial_baudrate"     type="int"    value="256000"/>--><!--A3 -->
  <param name="frame_id"            type="string" value="laser"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
  </node>

<!--Hector SLAM-->

  <!--<node pkg="hector_mapping" type="hector_mapping" name="hector_slam"/>-->  

<!--Transforms-->

 

  <node pkg="tf" type="static_transform_publisher" name="base_k2laser" args="0 0 0 0 0 0 base_link laser 10"/>

  <node pkg="tf" type="static_transform_publisher" name="base_linkmap" args="0 0 0 0 0 0 odom base_link 10"/>

  <!--<node pkg="tf" type="static_transform_publisher" name="odom2_base_Frame" args="0.5 -0.26 0 0 0 0 odom base_frame 10"/> --> 

 



 <!--Alt-->

  <!--<node pkg="tf" type="static_transform_publisher" name="base_k2laser" args="0 0 0 0 0 0 base_link laser 10"/>

  <node pkg="tf" type="static_transform_publisher" name="base_linkmap" args="0 0 0 0 0 0 odom base_link 10"/>

  <node pkg="tf" type="static_transform_publisher" name="odom2_base_Frame" args="0.5 -0.26 0 0 0 0 odom base_frame 10"/> -->

	<!--Kamera hinten-->

  <node pkg="tf" type="static_transform_publisher" name="base_link2camera_depth_frame" args="-0.27 -0.24 0 1.57 0 -1.57 base_link kinect1_rgb_optical_frame 10"/>


	<!--Kamera vorne-->

  <node pkg="tf" type="static_transform_publisher" name="base_linkcamera_depth_frame" args="0.1 -0.24 0 -1.57 0 -1.57 base_link 	kinect2_rgb_optical_frame 10"/>

<!-- <node pkg="tf" type="static_transform_publisher" name="base_link2rgboptical" args="0.1 -0.24 0 0 0 0 base_link cam_front 10"/> -->


<!--Depthimage to laser-->

 	<!--Kamera vorne-->


  <!--<node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan2">
    <remap from="image" to="kinect2/qhd/depth_image_filtered"/>
    <param name="output_frame_id" type="string" value="cam_front"/>
    <remap from="camera_info" to="kinect2/qhd/camera_info"/>
    <remap from="scan" to="scan2"/>
	<param name="scan_height" type="int" value="290"/>
  </node>-->


	<!--Kamera hinten-->
	

  <!--<node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan1">
    <remap from="image" to="kinect1/qhd/depth_image_filtered"/>
    <param name="output_frame_id" type="string" value="cam_back"/>
    <remap from="camera_info" to="kinect1/qhd/camera_info"/>
    <remap from="scan" to="scan1"/>
	<param name="scan_height" type="int" value="290"/>
	<param name="range_max" type="double" value="6.0"/>
  </node>-->

<!--Joint state publisher-->

  <node name="joint_state_publisher"  pkg="joint_state_publisher"  type="joint_state_publisher" clear_params="true">
    <param name="robot_description" textfile="/home/alf/catkin_ws/devel/lib/rplidar_ros/myfirst.urdf"/>
	<param name="use_gui" value="false" />
  </node>

<!--Rviz-->

  <node name="rviz"  pkg="rviz"  type="rviz">
    <remap from="robot_description" to="/joint_state_publisher/robot_description"/>
  </node>

<!--ICP Odometry-->

  <node name="icp_odometry"  pkg="rtabmap_ros"  type="icp_odometry">
  </node>

<!--Kamera hinten-->

  <node pkg="nodelet" type="nodelet" name="rgbd_sync1" args="standalone rtabmap_ros/rgbd_sync" output="screen">
    <remap from="rgb/image"        to="kinect1/qhd/image_color"/>
    <remap from="depth/image"      to="kinect1/qhd/image_depth_rect"/>
    <remap from="rgb/camera_info"  to="kinect1/qhd/camera_info"/>
    <remap from="rgbd_image"       to="rgbd_image0"/> 
    <param name="approx_sync"       value="true"/> 
  </node>

<!--Kamera vorne-->

  <node pkg="nodelet" type="nodelet" name="rgbd_sync2" args="standalone rtabmap_ros/rgbd_sync" output="screen">
    <remap from="rgb/image"        to="kinect2/qhd/image_color"/>
    <remap from="depth/image"      to="kinect2/qhd/image_depth_rect"/>
    <remap from="rgb/camera_info"  to="kinect2/qhd/camera_info"/>
    <remap from="rgbd_image"       to="rgbd_image1"/> 
    <param name="approx_sync"       value="true"/> 
  </node>


<!--RTABmap-->

  <!--<node name="rtabmap"  pkg="rtabmap_ros"  type="rtabmap" clear_params="true">
    <remap from="rgb/image" to="kinect1/qhd/image_color"/>
    <remap from="depth/image" to="kinect1/qhd/depth_image_filtered"/>
    <remap from="rgb/camera_info" to="kinect1/qhd/camera_info"/>
    <param name="subscribe_rgbd" type="bool" value="false"/>
    <param name="subscribe_scan" type="bool" value="true"/>-->
    <!--<param name="rgbd_cameras" type="int" value="2"/>-->
  <!--</node>-->


</launch>
